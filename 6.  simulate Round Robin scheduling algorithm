Construct a C program to simulate Round Robin scheduling algorithm with C.

#include<stdio.h>
#include<conio.h>
int main(){
	int i,NOP,sum=0,count=0,y,quant,wt=0,tat=0,at[10],bt[10],temp[10];
	float avg_wt,avg_tat;
	printf("Totalnumberofprocessinthesystem:");
	scanf("%d",&NOP);
	y=NOP;
	for(i=0;i<NOP;i++){
		printf("\nEntertheArrivalandBursttimeoftheProcess[%d]\n",i+1);
		printf("Arrivaltimeis:\t");
		scanf("%d",&at[i]);
		printf("\nBursttimeis:\t");
		scanf("%d",&bt[i]);
		temp[i]=bt[i];
	}
	printf("EntertheTimeQuantumfortheprocess:\t");
	scanf("%d",&quant);
	printf("\nProcessNo\t\tBurstTime\t\tTAT\t\tWaitingTime");
	for(sum=0,i=0;y!=0;){
		if(temp[i]<=quant&&temp[i]>0){
			sum+=temp[i];
			temp[i]=0;
			count=1;
		}else if(temp[i]>0){
			temp[i]-=quant;
			sum+=quant;
		}
		if(temp[i]==0&&count==1){
			y--;
			printf("\nProcessNo[%d]\t\t%d\t\t\t\t%d\t\t\t%d",i+1,bt[i],sum-at[i],sum-at[i]-bt[i]);
			wt+=sum-at[i]-bt[i];
			tat+=sum-at[i];
			count=0;
		}
		if(i==NOP-1){
			i=0;
		}else if(at[i+1]<=sum){
			i++;
		}else{
			i=0;
		}
	}
	avg_wt=wt*1.0/NOP;
	avg_tat=tat*1.0/NOP;
	printf("\nAverageTurnAroundTime:\t%f",avg_wt);
	printf("\nAverageWaitingTime:\t%f",avg_tat);
	getch();
}
